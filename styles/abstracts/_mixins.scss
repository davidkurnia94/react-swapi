///====================================================================================================
///
///	###	Mixins
///
///
///		https://sass.guidelin.es/#mixins
///
///====================================================================================================

@mixin scrollbar($size, $foreground-color, $background-color: mix($foreground-color, $clr-primary-light, 50%)) {
	// For Google Chrome
	::-webkit-scrollbar {
		width:  $size;
		height: $size;
	}

	::-webkit-scrollbar-thumb {
		background: $foreground-color;
	}

	::-webkit-scrollbar-track {
		background: $background-color;
	}
}


//---------------------------------------------------------------------------
//
//	##	Forms and Inputs
//
//---------------------------------------------------------------------------
//	#	Placeholder
//---------------------------------------------------------------------------
@mixin placeholder {
	&::-webkit-input-placeholder {
		@content;
	}

	&:-moz-placeholder { /* Firefox 18- */
		@content;
	}

	&::-moz-placeholder {  /* Firefox 19+ */
		@content;
	}

	&:-ms-input-placeholder {
		@content;
	}
}
//---------------------------------------------------------------------------
//
//	##	Appearances
//
//		Mixins inside this category are geared towards components that
//		is customizable appearance wise. Components like images and alike
//		are heavily dependent to mixins inside this category.
//
//---------------------------------------------------------------------------
//	#	Background
//---------------------------------------------------------------------------
@mixin background($bg...) {
	background: $bg;
}

//---------------------------------------------------------------------------
//	#	Appearance
//---------------------------------------------------------------------------
@mixin appearance($value) {
	@include prefix(appearance, $value, webkit ms);
}

//---------------------------------------------------------------------
//
//	##	Position
//
//---------------------------------------------------------------------
/// Shorthand mixin for offset positioning
/// @param {String} $position - Either `relative`, `absolute` or `fixed`
/// @param {Length} $top [null] - Top offset
/// @param {Length} $right [null] - Right offset
/// @param {Length} $bottom [null] - Bottom offset
/// @param {Length} $left [null] - Left offset
@mixin position($position, $args: ()) {
	$offsets: top right bottom left;
	position: $position;

	@each $offset in $offsets {
		// All this code happens inside the loop
		$index: index($args, $offset);

		// If offset is found in the list
		@if $index {

			@if $index == length($args) {
				#{$offset}: 0;
			}

			@else {
				$next: nth($args, $index + 1);

				@if is-valid-length($next) {
					#{$offset}: $next;
				}

				@else if index($offsets, $next) {
					#{$offset}: 0;
				}

				@else {
					@warn "Invalid value `#{$next}` for offset `#{$offset}`.";
				}
			}
		}
	}
}

/// Shorthand mixin for absolute positioning
/// Serves as an alias for `position(absolute, ...)`
/// @param {Arglist} $args - Offsets
/// @require {mixin} position
@mixin absolute($args: ()) {
	@include position(absolute, $args);
}

/// Shorthand mixin for relative positioning
/// Serves as an alias for `position(relative, ...)`
/// @param {Arglist} $args - Offsets
/// @require {mixin} position
@mixin relative($args: ()) {
	@include position(relative, $args);
}

/// Shorthand mixin for fixed positioning
/// Serves as an alias for `position(fixed, ...)`
/// @param {Arglist} $args - Offsets
/// @require {mixin} position
@mixin fixed($args: ()) {
	@include position(fixed, $args);
}

//---------------------------------------------------------------------
//
//	##	Layout
//
//---------------------------------------------------------------------
@mixin offsets($offsets, $args: ()) {
	$offsets: $offsets;
	$value: $args;

	@each $offset in $offsets {
		// All this code happens inside the loop
		$index: index($args, $offset);

		// If offset is found in the list
		@if $index {
			@if $index == length($args) {
				#{$offset}: $args;
			} @else {
				$next: nth($args, $index + 1);

				@if is-valid-length($next) {
					#{$offset}: $next;
				}

				@else if index($offsets, $next) {
					#{$offset}: 0;
				}

				@else {
					@warn "Invalid value `#{$next}` for offset `#{$offset}`.";
				}
			}
		}
	}
}

@mixin position($position, $args: ()) {
	$offsets: top right bottom left;

	position: $position;
	@include offsets($offsets, $args);
}

@mixin padding($values...) {
	padding: $values;
}


@mixin padding-stack($args: ()) {
	$offsets: top right bottom left;

	@each $offset in $offsets {
		// All this code happens inside the loop
		$index: index($args, $offset);

		// If offset is found in the list
		@if $index {

			@if $index == length($args) {
				padding-#{$offset}: 0;
			}

			@else {
				$next: nth($args, $index + 1);

				@if is-valid-length($next) {
					padding-#{$offset}: $next;
				}

				@else if index($offsets, $next) {
					padding-#{$offset}: 0;
				}

				@else {
					@warn "Invalid value `#{$next}` for offset `#{$offset}`.";
				}
			}
		}
	}

}

@mixin margin($values...) {
	margin: $values;
}

@mixin margin-stack($args: ()) {
	$offsets: top right bottom left;

	@each $offset in $offsets {
		// All this code happens inside the loop
		$index: index($args, $offset);

		// If offset is found in the list
		@if $index {

			@if $index == length($args) {
				margin-#{$offset}: 0;
			}

			@else {
				$next: nth($args, $index + 1);

				@if is-valid-length($next) {
					margin-#{$offset}: $next;
				}

				@else if index($offsets, $next) {
					margin-#{$offset}: 0;
				}

				@else {
					@warn "Invalid value `#{$next}` for offset `#{$offset}`.";
				}
			}
		}
	}

}

@mixin box-sizing($box-model) {
	@include prefix(box-sizing, $box-model, webkit moz);
}

@mixin computeSize($type, $args: ()) {
	$offsets: width height;

	@if $type == default {
		@include offsets($offsets, $args);
	}
	@else if $type == max or $type == min {
		@each $offset in $offsets {
			// All this code happens inside the loop
			$index: index($args, $offset);

			// If offset is found in the list
			@if $index {
				//	@include size(100%) misalnya.
				@if $index == length($args) {
					#{$type}-#{$offset}: $args;
				}
				@else {
					$next: nth($args, $index + 1);

					@if is-valid-length($next) {
						#{$type}-#{$offset}: $next
					}
					@else if index($offsets, $next) {
						#{$type}-#{$offset}: $args
					}
					@else {
						@warn "Invalid value `#{$next}` for offset `#{$offset}`.";
					}
				}
			}
		}
	}
}

@mixin size($value) {
	@include computeSize(default, $value);
}

@mixin min-size($value) {
	@include computeSize(min, $value);
}

@mixin max-size($value) {
	@include computeSize(max, $value);
}

//---------------------------------------------------------------------
//
//	##	Fonts and Typography
//
//---------------------------------------------------------------------
@mixin font-family($font-family) {
	font-family: $font-family;
}

@mixin font-smoothing($value: true) {
	@if ($value == true) {
		-moz-osx-font-smoothing: grayscale;
		-webkit-font-smoothing: antialiased;
	} @else {
		-moz-osx-font-smoothing: auto;
		-webkit-font-smoothing: subpixel-antialiased;
	}
}

@mixin font-weight($weight) {
	$weights: (
	thin: 100,
	extra-light: 200,
	ultra-light: 200,
	light: 300,
	normal: 400,
	book: 400,
	regular: 400,
	medium: 500,
	semi-bold: 600,
	demi-bold: 600,
	bold: 700,
	extra-bold: 800,
	ultra-bold: 900,
	heavy: 900,
	black: 900,
	ultra: 900,
	ultra-black: 900,
	extra-ultra: 900
	);

	//  Compares font weight from user input with the provided map of weights.
	//  If the inputted value is the same with one of the provided value
	//  above, then return the value.
	$output: $weight;
	@if map-has-key($weights, $weight) {
		$output: map-get($weights, $weight);
	}

	font-weight: $output;
}

@mixin font-size($size) {
	@if(unitless($size)) {
		font-size: $size + px; //fallback for old browsers
		font-size: (0.0625 * $size) + rem;
	} @else {
		$striped-size: strip-unit($size);
		font-size: $size;
		font-size: (0.0625 * $striped-size) + rem;
	}
}

@mixin line-height($line-height: $lh-base){
	// line-height: $line-height + px; //fallback for old browsers
	line-height: $line-height;
}

@mixin font($font-size: $fs-base, $font-weight: $fw-regular, $line-height: $lh-base) {
	@if is-integer($font-size) {
		@include font-size($font-size);
	} @else {
		font-size: $font-size;
	}
	@include font-weight($font-weight);
	@include line-height($lh-base);
}

// @mixin text-format($color: inherit, $text-align: left, $text-decoration: null, $text-transform: null,
//     $text-indent: null, $text-direction: null, $letter-spacing: null, $word-spacing: null,
//     $text-shadow: null) {
//
//     color: $color;
//     text-align: $text-align;
//     text-decoration: $text-decoration;
//     text-transform: $text-transform;
//     text-indent: $text-indent;
//     text-direction: $text-direction;
//     letter-spacing: $letter-spacing;
//     word-spacing: $word-spacing;
//     text-shadow: $text-shadow;
// }


@mixin text-format($args: ()) {
	$offsets: color text-align text-decoration text-transform
	text-indent text-direction letter-spacing word-spacing text-shadow;

	@include offsets($offsets, $args);
}


@mixin border-radius($value) {
	@include prefix(border-radius, $value, webkit ms);
}

//  Iconography
@mixin pseudo-icon($ff, $content) {
	@include font-family($ff);
	content: $content;
}

//---------------------------------------------------------------------
//
//	##	Flexbox
//
//---------------------------------------------------------------------
//
//  #	Flexbox Containers
//
//  The 'flex' value causes an element to generate a block-level flex
//  container box.
//
//  The 'inline-flex' value causes an element to generate a inline-level
//  flex container box.
//
//  http://w3.org/tr/css3-flexbox/#flex-containers
//
//---------------------------------------------------------------------
@mixin flexbox($type: default) {
	@if $type == default {
		display: -webkit-box;
		display: -webkit-flex;
		display: -moz-flex;
		display: -ms-flexbox;
		display: flex;
	} @else if $type == inline {
		display: -webkit-inline-box;
		display: -webkit-inline-flex;
		display: -moz-inline-flex;
		display: -ms-inline-flexbox;
		display: inline-flex;
	}
}

//---------------------------------------------------------------------
//
//  Flexbox Direction
//
//  The 'flex-direction' property specifies how flex items are placed in
//  the flex container, by setting the direction of the flex container's
//  main axis. This determines the direction that flex items are laid out in.
//
//
//  http://w3.org/tr/css3-flexbox/#flex-direction-property
//
//---------------------------------------------------------------------
@mixin flex-direction($value: row) {
	@if $value == row-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: horizontal;
	} @else if $value == column {
		-webkit-box-direction: normal;
		-webkit-box-orient: vertical;
	} @else if $value == column-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: vertical;
	} @else {
		-webkit-box-direction: normal;
		-webkit-box-orient: horizontal;
	}
	-webkit-flex-direction: $value;
	-moz-flex-direction: $value;
	-ms-flex-direction: $value;
	flex-direction: $value;
}


// Flexbox Wrap
//
// The 'flex-wrap' property controls whether the flex container is single-line
// or multi-line, and the direction of the cross-axis, which determines
// the direction new lines are stacked in.
//
//
// http://w3.org/tr/css3-flexbox/#flex-wrap-property

@mixin flex-wrap($value: nowrap) {
	// No Webkit Box fallback.
	-webkit-flex-wrap: $value;
	-moz-flex-wrap: $value;
	@if $value == nowrap {
		-ms-flex-wrap: none;
	} @else {
		-ms-flex-wrap: $value;
	}
	flex-wrap: $value;
}


// Flexbox Flow (shorthand)
//
// The 'flex-flow' property is a shorthand for setting the 'flex-direction'
// and 'flex-wrap' properties, which together define the flex container's
// main and cross axes.
//
//
// http://w3.org/tr/css3-flexbox/#flex-flow-property

@mixin flex-flow($values: (row nowrap)) {
	// No Webkit Box fallback.
	-webkit-flex-flow: $values;
	-moz-flex-flow: $values;
	-ms-flex-flow: $values;
	flex-flow: $values;
}

// Flexbox Order
//
// The 'order' property controls the order in which flex items appear within
// their flex container, by assigning them to ordinal groups.
//
// Default: 0
//
// http://w3.org/tr/css3-flexbox/#order-property

@mixin order($int: 0) {
	-webkit-box-ordinal-group: $int + 1;
	-webkit-order: $int;
	-moz-order: $int;
	-ms-flex-order: $int;
	order: $int;
}

// Flexbox Grow
//
// The 'flex-grow' property sets the flex grow factor. Negative numbers
// are invalid.
//
// Default: 0
//
// http://w3.org/tr/css3-flexbox/#flex-grow-property

@mixin flex-grow($int: 0) {
	-webkit-box-flex: $int;
	-webkit-flex-grow: $int;
	-moz-flex-grow: $int;
	-ms-flex-positive: $int;
	flex-grow: $int;
}

// Flexbox Shrink
//
// The 'flex-shrink' property sets the flex shrink factor. Negative numbers
// are invalid.
//
//
// http://w3.org/tr/css3-flexbox/#flex-shrink-property

@mixin flex-shrink($int: 1) {
	-webkit-flex-shrink: $int;
	-moz-flex-shrink: $int;
	-ms-flex-negative: $int;
	flex-shrink: $int;
}

// Flexbox Basis
//
// The 'flex-basis' property sets the flex basis. Negative lengths are invalid.
//
// Values: Like "width"
// Default: auto
//
// http://www.w3.org/TR/css3-flexbox/#flex-basis-property

@mixin flex-basis($value: auto) {
	-webkit-flex-basis: $value;
	-moz-flex-basis: $value;
	-ms-flex-preferred-size: $value;
	flex-basis: $value;
}


// Flexbox "Flex" (shorthand)
//
// The 'flex' property specifies the components of a flexible length: the
// flex grow factor and flex shrink factor, and the flex basis. When an
// element is a flex item, 'flex' is consulted instead of the main size
// property to determine the main size of the element. If an element is
// not a flex item, 'flex' has no effect.
//
// Values: none | <flex-grow> <flex-shrink> || <flex-basis>
// Default: See individual properties (1 1 0).
//
// http://w3.org/tr/css3-flexbox/#flex-property

@mixin flex($fg: 1, $fs: null, $fb: null) {

	// Set a variable to be used by box-flex properties
	$fg-boxflex: $fg;

	// Box-Flex only supports a flex-grow value so let's grab the
	// first item in the list and just return that.
	@if type-of($fg) == 'list' {
		$fg-boxflex: nth($fg, 1);
	}

	-webkit-box-flex: $fg-boxflex;
	-webkit-flex: $fg $fs $fb;
	-moz-box-flex: $fg-boxflex;
	-moz-flex: $fg $fs $fb;
	-ms-flex: $fg $fs $fb;
	flex: $fg $fs $fb;
}


// Flexbox Justify Content
//
// The 'justify-content' property aligns flex items along the main axis
// of the current line of the flex container. This is done after any flexible
// lengths and any auto margins have been resolved. Typically it helps distribute
// extra free space leftover when either all the flex items on a line are
// inflexible, or are flexible but have reached their maximum size. It also
// exerts some control over the alignment of items when they overflow the line.
//
// Note: 'space-*' values not supported in older syntaxes.
//
// Values: flex-start | flex-end | center | space-between | space-around
// Default: flex-start
//
// http://w3.org/tr/css3-flexbox/#justify-content-property

@mixin justify-content($value: start) {
	@if $value == start {
		-webkit-box-pack: start;
		-ms-flex-pack: start;
	} @else if $value == center {
		-webkit-box-pack: center;
		-ms-flex-pack: center;
	} @else if $value == end {
		-webkit-box-pack: end;
		-ms-flex-pack: end;
	} @else if $value == space-between {
		-webkit-box-pack: justify;
		-ms-flex-pack: justify;
	} @else if $value == space-around {
		-ms-flex-pack: distribute;
	} @else {
		-webkit-box-pack: $value;
		-ms-flex-pack: $value;
	}
	-webkit-justify-content: $value;
	-moz-justify-content: $value;
	justify-content: $value;
}

// Flexbox Align Items
//
// Flex items can be aligned in the cross axis of the current line of the
// flex container, similar to 'justify-content' but in the perpendicular
// direction. 'align-items' sets the default alignment for all of the flex
// container's items, including anonymous flex items. 'align-self' allows
// this default alignment to be overridden for individual flex items. (For
// anonymous flex items, 'align-self' always matches the value of 'align-items'
// on their associated flex container.)
//
//
// http://w3.org/tr/css3-flexbox/#align-items-property

@mixin align-items($value: stretch) {
	@if $value == start {
		-webkit-box-align: start;
		-ms-flex-align: start;
	} @else if $value == center {
		-webkit-box-align: center;
		-ms-flex-align: center;
	} @else if $value == end {
		-webkit-box-align: end;
		-ms-flex-align: end;
	} @else {
		-webkit-box-align: $value;
		-ms-flex-align: $value;
	}
	-webkit-align-items: $value;
	-moz-align-items: $value;
	align-items: $value;
}


// Flexbox Align Self
//
// Values: auto | flex-start | flex-end | center | baseline | stretch
// Default: auto

@mixin align-self($value: auto) {
	// No Webkit Box Fallback.
	-webkit-align-self: $value;
	-moz-align-self: $value;
	@if $value == start {
		-ms-flex-item-align: start;
	} @else if $value == end {
		-ms-flex-item-align: end;
	} @else {
		-ms-flex-item-align: $value;
	}
	align-self: $value;
}

//----------------------------------------------------------------------

// Flexbox Align Content
//
// The 'align-content' property aligns a flex container's lines within the
// flex container when there is extra space in the cross-axis, similar to
// how 'justify-content' aligns individual items within the main-axis. Note,
// this property has no effect when the flexbox has only a single line.
//
// Values: flex-start | flex-end | center | space-between | space-around | stretch
// Default: stretch
//
// http://w3.org/tr/css3-flexbox/#align-content-property

@mixin align-content($value: stretch) {
	// No Webkit Box Fallback.
	-webkit-align-content: $value;
	-moz-align-content: $value;
	@if $value == flex-start {
		-ms-flex-line-pack: start;
	} @else if $value == flex-end {
		-ms-flex-line-pack: end;
	} @else {
		-ms-flex-line-pack: $value;
	}
	align-content: $value;
}


//---------------------------------------------------------------------
//
//		Media Queries
//
//		Bootstrap based media queries.
//
//---------------------------------------------------------------------

@function is-valid-length($value) {
	@return (type-of($value) == "number" and not unitless($value))
	or (index(auto initial inherit 0, $value) != false);
}

//=	Mobile-First Method =//
@mixin phone {
	@media (min-width: #{$phone-width}) {
		@content;
	}
}

@mixin tablet {
	@media (min-width: #{$tablet-width}) {
		@content;
	}
}

@mixin desktop {
	@media (min-width: #{$desktop-width}) {
		@content;
	}
}

@mixin large-desktop {
	@media (min-width: #{$large-desktop-width}){
		@content;
	}
}

@mixin content {
	@content;
}

// Non Mobile-First/Original Method
// @mixin small {
// 	@media (max-width: #{$phone-width - 1px}) {
// 		@content;
// 	}
// }
//
// @mixin phone {
// 	@media (min-width: #{$phone-width}) and (max-width: #{$tablet-width - 1px}) {
// 		@content;
// 	}
// }
//
// @mixin tablet {
// 	@media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {
// 		@content;
// 	}
// }
//
// @mixin desktop {
// 	@media (min-width: #{$desktop-width}) and (max-width: #{$large-desktop-width - 1px}) {
// 		@content;
// 	}
// }
//
// @mixin large-desktop {
// 	@media (min-width: #{$large-desktop-width}) {
// 		@content;
// 	}
// }

@mixin retina {
	@media
	only screen and (-webkit-min-device-pixel-ratio: 2),
	only screen and (min--moz-device-pixel-ratio: 2),
	only screen and (-o-min-device-pixel-ratio: 2/1),
	only screen and (min-device-pixel-ratio: 2),
	only screen and (min-resolution: 192dpi),
	only screen and (min-resolution: 2dppx) {
		@content;
	}
}

@mixin print {
	@media print {
		@content;
	}
}


//---------------------------------------------------------------------
//
//	##	Transitions and Animations
//
//---------------------------------------------------------------------
@mixin transition($value...) {
	@include prefix(transition, $value, webkit moz o);
}

@mixin transition-delay($value...) {
	@include prefix(transition-delay, $value, webkit moz o);
}

@mixin transform($value...) {
	@include prefix(transform, $value, webkit moz o);
}

@mixin filter($value...) {
	@include prefix(filter, $value, webkit moz o);
}


@mixin animation-stack($value...) {
	@include prefix(animation, $value, webkit moz ms);
}

@mixin animation($animation, $fill-mode: forwards, $delay: null, $duration: null, $timing: linear) {
	@include animation-delay($delay);
	@include animation-duration($duration);
	@include animation-name($animation);
	@include animation-fill-mode($fill-mode);
	@include animation-timing-function($timing);
}


@mixin animation-delay($delay) {
	@include prefix(animation-delay, $delay, webkit moz ms);
}

@mixin animation-duration($duration) {
	@include prefix(animation-duration, $duration, webkit moz ms);
}

@mixin animation-name($animation) {
	@include prefix(animation-name, $animation, webkit moz ms);
}

@mixin animation-fill-mode($fill-mode) {
	@include prefix(animation-fill-mode, $fill-mode, webkit moz ms);
}

@mixin animation-timing-function($timing) {
	@include prefix(animation-timing-function, $timing, webkit moz ms);
}

@mixin keyframes ($animation_name) {
	@-webkit-keyframes #{$animation_name} {
		@content;
	}

	@-moz-keyframes #{$animation_name} {
		@content;
	}

	@keyframes #{$animation_name} {
		@content;
	}
}

//---------------------------------------------------------------------
//
//	##	Miscellanous
//
//---------------------------------------------------------------------
@mixin prefix($property, $value, $prefixes: ()) {
	@each $prefix in $prefixes {
		#{'-' + $prefix + '-' + $property}: $value;
	}

	// Output standard non-prefixed declaration
	#{$property}: $value;
}

@mixin hardware-accelerate() {
	@include transform(translate3d(0,0,0));
}

//---------------------------------------------------------------------------
//	#	Object Fit
//---------------------------------------------------------------------------
@mixin object-fit($fit: fill, $position: null) {
	@include prefix(object-fit, $fit, webkit o);

	@if $position {
		@include prefix(object-position, $position, webkit o);
		font-family: 'object-fit: #{$fit}; object-position: #{$position}';
	} @else {
		font-family: 'object-fit: #{$fit}';
	}
}
